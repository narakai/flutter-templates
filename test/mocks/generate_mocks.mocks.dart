// Mocks generated by Mockito 5.0.15 from annotations
// in flutter_templates/test/mocks/generate_mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dio/dio.dart' as _i2;
import 'package:flutter_templates/api/api_service.dart' as _i3;
import 'package:flutter_templates/model/response/user_response.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeRequestOptions_0 extends _i1.Fake implements _i2.RequestOptions {}

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i3.ApiService {
  MockApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.UserResponse>> getUsers() =>
      (super.noSuchMethod(Invocation.method(#getUsers, []),
              returnValue:
                  Future<List<_i5.UserResponse>>.value(<_i5.UserResponse>[]))
          as _i4.Future<List<_i5.UserResponse>>);

  @override
  String toString() => super.toString();
}

/// A class which mocks [DioError].
///
/// See the documentation for Mockito's code generation for more information.
class MockDioError extends _i1.Mock implements _i2.DioError {
  MockDioError() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RequestOptions get requestOptions =>
      (super.noSuchMethod(Invocation.getter(#requestOptions),
          returnValue: _FakeRequestOptions_0()) as _i2.RequestOptions);

  @override
  set requestOptions(_i2.RequestOptions? _requestOptions) =>
      super.noSuchMethod(Invocation.setter(#requestOptions, _requestOptions),
          returnValueForMissingStub: null);

  @override
  set response(_i2.Response<dynamic>? _response) =>
      super.noSuchMethod(Invocation.setter(#response, _response),
          returnValueForMissingStub: null);

  @override
  _i2.DioErrorType get type => (super.noSuchMethod(Invocation.getter(#type),
      returnValue: _i2.DioErrorType.connectTimeout) as _i2.DioErrorType);

  @override
  set type(_i2.DioErrorType? _type) =>
      super.noSuchMethod(Invocation.setter(#type, _type),
          returnValueForMissingStub: null);

  @override
  set error(dynamic _error) =>
      super.noSuchMethod(Invocation.setter(#error, _error),
          returnValueForMissingStub: null);

  @override
  set stackTrace(StackTrace? stack) =>
      super.noSuchMethod(Invocation.setter(#stackTrace, stack),
          returnValueForMissingStub: null);

  @override
  String get message =>
      (super.noSuchMethod(Invocation.getter(#message), returnValue: '')
          as String);

  @override
  String toString() => super.toString();
}
